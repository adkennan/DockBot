.key HELP/S,CLEAN/S,CLEANOBJ/S,CPU/K,ALL/S,EXE/S,LIB/S,PREFS/S,BUTTON/S,CLOCK/S,MEM/S,NET/S,SWITCHER/S,EYES/S,DIR/K,RELEASE/S

IF <HELP$NOHELP> EQ HELP
  ECHO "Options: "
  ECHO "  HELP/S       Show this help message."
  ECHO "  CLEAN/S      Remove object files and binaries."
  ECHO "  CLEANOBJ/S   Remove object files."
  ECHO "  CPU/K        Sets the CPU to target. Defaults to CPU of this machine."
  ECHO "  DIR/K        Set the output directory. Defaults to /bin/debug."
  ECHO "  ALL/S        Compile all components."
  ECHO "  RELEASE/S    Compile for release - optimize, no debug info."
  ECHO "  EXE/S        Compile the DockBot executable."
  ECHO "  LIB/S        Compile dockbot.library."
  ECHO "  PREFS/S      Compile the preferences application."
  ECHO "  BUTTON/S     Compile the button class."
  ECHO "  CLOCK/S      Compile the clock class."
  ECHO "  MEM/S        Compile the mem class."
  ECHO "  NET/S        Compile the net class."
  ECHO "  SWITCHER/S   Compile the switcher class."
  ECHO "  EYES/S       Compile the eyes class."
  ECHO
  QUIT
ENDIF

RESIDENT sc:c/sc	PURE
RESIDENT sc:c/slink PURE
RESIDENT sc:c/smake PURE

ECHO Checking Requirements

ECHO NOLINE "  SAS/C: "
IF NOT EXISTS sc:c/sc
  ECHO Not Found
  QUIT
ENDIF
VERSION sc:c/sc 6 58 >NIL:
IF WARN
  ECHO Need version 6.58
  QUIT
ENDIF
ECHO OK

ECHO NOLINE "  SYS:Rexxc/RX "
IF NOT EXISTS SYS:Rexxc/RX
  ECHO Not Found
  QUIT
ENDIF
ECHO OK

ECHO " "

; Decide on a CPU to compile for.
CPU CHECK 68040 >NIL:
IF WARN 
  CPU CHECK 68030 >NIL:
  IF WARN
    CPU CHECK 68020 >NIL:
    IF WARN
      SET defcpu 68000
    ELSE
      SET defcpu 68020
    ENDIF
  ELSE
    SET defcpu 68030
  ENDIF
ELSE
  SET defcpu 68040
ENDIF

.def CPU $defcpu

ECHO Compiling for <CPU>
ECHO " "

IF <RELEASE$NORELEASE> EQ RELEASE
  ECHO Compiling Release Build
  ECHO " "
  SET DEFFILE release.defs
  SET OUTDIR /bin/<CPU>
ELSE

  ECHO Compiling Debug Build
  ECHO " "
  SET DEFFILE debug.defs
  SET OUTDIR /bin/debug  
ENDIF

SET COMPILELIB 		N
SET COMPILEEXE 		N
SET COMPILEPREFS 	N
SET COMPILEBUTTON 	N		
SET COMPILECLOCK 	N
SET COMPILEMEM 		N
SET COMPILENET 		N
SET COMPILESWITCHER	N
SET COMPILEEYES		N

IF <ALL$NOALL> EQ ALL

  ECHO "Compiling All"
  ECHO " "

  SET COMPILELIB 		Y
  SET COMPILEEXE 		Y
  SET COMPILEPREFS 		Y
  SET COMPILEBUTTON 	Y		
  SET COMPILECLOCK 		Y
  SET COMPILEMEM 		Y
  SET COMPILENET 		Y
  SET COMPILESWITCHER	Y
  SET COMPILEEYES		Y
ELSE
  IF <LIB$NOLIB> EQ LIB
    SET COMPILELIB		Y
  ENDIF
  IF <EXE$NOEXE> EQ EXE
    SET COMPILEEXE 		Y
  ENDIF
  IF <PREFS$NOPREFS> EQ PREFS
	SET COMPILEPREFS	Y 
  ENDIF
  IF <BUTTON$NOBUTTON> EQ BUTTON
	SET COMPILEBUTTON	Y
  ENDIF
  IF <CLOCK$NOCLOCK> EQ CLOCK
	SET COMPILECLOCK	Y
  ENDIF
  IF <MEM$NOMEM> EQ MEM
	SET COMPILEMEM		Y
  ENDIF
  IF <NET$NONET> EQ NET
	SET COMPILENET		Y
  ENDIF
  IF <SWITCHER$NOSWITCHER> EQ SWITCHER
    SET COMPILESWITCHER	Y
  ENDIF
  IF <EYES$NOEYES> EQ EYES 
	SET COMPILEEYES 	Y
  ENDIF
ENDIF


EXECUTE /VERSION
ECHO "Version `getenv $DOCKBOT_VERSION`"
ECHO " "

SET BV "define=BUILDVER=""`getenv $DOCKBOT_VERSION`"
SET DS "define=DS=""`RX 'SAY DATE("european")'`"

ECHO "Output to $OUTDIR"
ECHO " "

IF <CLEAN$NOCLEAN> EQ NOCLEAN
  IF NOT EXISTS $OUTDIR
    MAKEDIR $OUTDIR
  ENDIF
  IF NOT EXISTS $OUTDIR/Gadgets
    MAKEDIR $OUTDIR/Gadgets
  ENDIF
ENDIF

IF "$COMPILELIB" EQ "Y"
  ECHO Compiling dockbot.library
  ECHO " "
  cd LibDockBot
  smake -b /$DEFFILE <CLEAN> <CLEANOBJ> DIR=$OUTDIR CPU=<CPU> DEF_DS=$DS DEF_BV=$BV
  cd /
ENDIF

IF "$COMPILEEXE" EQ "Y"
  echo Compiling DockBot
  echo " "
  cd DockBot
  smake -b /$DEFFILE <CLEAN> <CLEANOBJ> DIR=$OUTDIR CPU=<CPU> DEF_DS=$DS DEF_BV=$BV
  cd /
ENDIF

IF $COMPILEPREFS EQ Y
  echo Compiling DockBotPrefs
  echo " "
  cd DockBotPrefs
  smake -b /$DEFFILE <CLEAN> <CLEANOBJ> DIR=$OUTDIR CPU=<CPU> DEF_DS=$DS DEF_BV=$BV
  cd /
ENDIF

IF $COMPILEBUTTON EQ Y
  echo Compiling Classes/Button
  echo " "
  cd Classes/Button
  smake -b //$DEFFILE <CLEAN> <CLEANOBJ> DIR=$OUTDIR CPU=<CPU> DEF_DS=$DS DEF_BV=$BV
  cd //
ENDIF

IF $COMPILECLOCK EQ Y
  echo Compiling Classes/Clock
  echo " "
  cd Classes/Clock
  smake -b //$DEFFILE <CLEAN> <CLEANOBJ> DIR=$OUTDIR CPU=<CPU> DEF_DS=$DS DEF_BV=$BV
  cd //
ENDIF

IF $COMPILEMEM EQ Y
  echo Compiling Classes/Mem
  echo " "
  cd Classes/Mem
  smake -b //$DEFFILE <CLEAN> <CLEANOBJ> DIR=$OUTDIR CPU=<CPU> DEF_DS=$DS DEF_BV=$BV
  cd //
ENDIF

IF $COMPILENET EQ Y
  echo Compiling Classes/Net
  echo " "
  cd Classes/Net
  smake -b //$DEFFILE <CLEAN> <CLEANOBJ> DIR=$OUTDIR CPU=<CPU> DEF_DS=$DS DEF_BV=$BV
  cd //
ENDIF

IF $COMPILESWITCHER EQ Y
  echo Compiling Classes/Switcher
  echo " "
  cd Classes/Switcher
  smake -b //$DEFFILE <CLEAN> <CLEANOBJ> DIR=$OUTDIR CPU=<CPU> DEF_DS=$DS DEF_BV=$BV
  cd //
ENDIF

IF $COMPILEEYES EQ Y
  echo Compiling Classes/Eyes
  echo " "
  cd Classes/Eyes
  smake -b //$DEFFILE <CLEAN> <CLEANOBJ> DIR=$OUTDIR CPU=<CPU> DEF_DS=$DS DEF_BV=$BV
  cd //
ENDIF


